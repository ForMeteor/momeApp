"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var router = require('../config/router.js');
exports.NAV_TO = function (routerKey, params) {
    if (params === void 0) { params = null; }
    if (params) {
        var querystring = '?';
        Object.keys(params).forEach(function (key) {
            querystring = querystring + key + '=' + params[key] + '&';
        });
        wx.navigateTo({
            url: router[routerKey.toUpperCase()] + querystring.slice(0, -1)
        });
    }
    else {
        wx.navigateTo({
            url: router[routerKey.toUpperCase()]
        });
    }
};
exports.NAV_RED = function (routerKey, params) {
    if (params === void 0) { params = null; }
    if (params) {
        var querystring = '?';
        Object.keys(params).forEach(function (key) {
            querystring = querystring + key + '=' + params[key] + '&';
        });
        wx.redirectTo({
            url: router[routerKey.toUpperCase()] + querystring.slice(0, -1)
        });
    }
    else {
        wx.redirectTo({
            url: router[routerKey.toUpperCase()]
        });
    }
};
exports.NAV_LAUNCH = function (routerKey, params) {
    if (params === void 0) { params = null; }
    if (params) {
        var querystring = '?';
        Object.keys(params).forEach(function (key) {
            querystring = querystring + key + '=' + params[key] + '&';
        });
        wx.reLaunch({
            url: router[routerKey.toUpperCase()] + querystring.slice(0, -1)
        });
    }
    else {
        wx.reLaunch({
            url: router[routerKey.toUpperCase()]
        });
    }
};
exports.NAV_TAB = function (routerKey) {
    wx.switchTab({
        url: router[routerKey]
    });
};
exports.NAV_BACK = function (num) {
    wx.navigateBack({
        delta: num || 1,
    });
};
exports.NAV_NOTI = function (funcName, params) {
    var pages = getCurrentPages();
    if (pages.length > 1) {
        var beforePage = pages[pages.length - 2];
        beforePage[funcName](params);
    }
};
var isLoading = false;
var loadingCount = 0;
var callback = null;
var delayTime = 0;
if (wx.getSystemInfoSync().platform == "android") {
    delayTime = 0;
}
else {
    delayTime = 200;
}
exports.HUD_SHOW = function () {
    loadingCount++;
    if (!isLoading) {
        isLoading = true;
        wx.showLoading({
            title: '加载中...',
            mask: true
        });
    }
};
exports.HUD_DISMISS = function () {
    loadingCount--;
    setTimeout(function () {
        if (loadingCount == 0) {
            isLoading = false;
            wx.hideLoading({
                success: function () {
                    callback && callback();
                    callback = null;
                }
            });
        }
    }, delayTime);
};
exports.TOAST_SHOW_SUCCESS = function (str, time) {
    if (time === void 0) { time = 2000; }
    if (isLoading) {
        callback = function () {
            wx.showToast({
                icon: 'success',
                title: str || '操作成功',
                duration: time,
            });
        };
    }
    else {
        wx.showToast({
            icon: 'success',
            title: str || '操作成功',
            duration: time,
        });
    }
};
exports.TOAST_SHOW_INFO = function (str) {
    if (isLoading) {
        callback = function () {
            wx.showToast({
                icon: 'none',
                title: str,
                duration: 2000,
            });
        };
    }
    else {
        wx.showToast({
            icon: 'none',
            title: str,
            duration: 2000,
        });
    }
};
//# sourceMappingURL=data:application/json;base64,